<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('partials/header') %>
  <title><%= title %></title>
</head>

<style>
  .dragging {
    opacity: 0.5;
    transform: scale(1.05);
    transition: transform 0.2s ease-in-out;
  }

  .draggable-item {
    transition: all 0.2s ease-in-out;
  }
</style>

<body>
  <%- include('partials/adminSide') %>
  <div id="dashboard-area">
    <section class="bg-white dark:bg-gray-900">
      <div class="py-8 px-4 mx-auto max-w-[700px] lg:py-16">
        <h2 class="mb-4 text-xl font-bold text-gray-900 dark:text-white">Edit Quest: <%= quest.name %></h2>
        <p class="mt-4 mb-4 text-gray-500 text-sm dark:text-gray-400">Drag and drop to reorder content</p>
        <div class="bg-white shadow-md rounded-lg rounded-b-none max-w-lg p-4">
          <ul id="draggable-list">
            <% quest.content.forEach(item => { %>
            <li data-id="<%= item.id._id %>" data-type="<%= item.id.constructor.modelName %>" class="draggable-item bg-blue-500 flex items-center justify-between text-white p-4 rounded-lg mb-2 cursor-move" draggable="true"><span class="max-w-1/2 truncate text-ellipsis"><%= item.id.constructor.modelName %>: <%= item.id.title %></span> <a href="/admin/quests/<%= quest._id %>/items/<%= item.id._id %>/edit"><button class="float-right text-black p-2 bg-slate-50 rounded hover:bg-slate-100 flex items-center gap-2">Edit <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                  </svg>
                </button></a></li>
            <% }) %>
          </ul>
          <% if (quest.content.length == 0) { %>
          <div class="bg-zinc-200 add-content-item p-4 flex items-center justify-between rounded-lg mb-2 cursor-default">Add content to your quest! <a href="/admin/quests/<%= quest._id %>/add"><button class="float-right text-white p-2 bg-blue-500 rounded hover:bg-blue-600">Add</button></a></div>
          <% } %>
        </div>
        <div class="bg-zinc-100 shadow-md add-content-item p-4 flex max-w-lg items-center justify-between rounded-lg rounded-t-none mb-2 cursor-default">Add content to your quest! <a href="/admin/quests/<%= quest._id %>/add"><button class="float-right text-white p-2 bg-blue-500 rounded hover:bg-blue-600 flex items-center gap-2">Add <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
              </svg>
            </button></a></div>
      </div>
    </section>
  </div>
  <script>
    const draggableItems = document.querySelectorAll('.draggable-item');
    const draggableList = document.getElementById('draggable-list');

    let isDragging = false;

    draggableItems.forEach(item => {
      item.addEventListener('dragstart', () => {
        item.classList.add('dragging');
        isDragging = true;
      });

      item.addEventListener('dragend', () => {
        item.classList.remove('dragging');
        if (isDragging) {
          isDragging = false;
          sendUpdatedOrder();
        }
      });
    });

    draggableList.addEventListener('dragover', (e) => {
      e.preventDefault();
      const afterElement = getDragAfterElement(draggableList, e.clientY);
      const draggingItem = document.querySelector('.dragging');
      if (afterElement == null) {
        draggableList.appendChild(draggingItem);
      } else {
        draggableList.insertBefore(draggingItem, afterElement);
      }
    });

    function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll('.draggable-item:not(.dragging)')];
      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
          return {
            offset: offset,
            element: child
          };
        } else {
          return closest;
        }
      }, {
        offset: Number.NEGATIVE_INFINITY
      }).element;
    }

    function sendUpdatedOrder() {
      const items = document.querySelectorAll('.draggable-item');
      const order = Array.from(items).map(item => {
        return {
          id: item.getAttribute('data-id'),
          type: item.getAttribute('data-type')
        }
      });

      // Example of sending data using fetch API
      fetch('/admin/quests/<%=quest._id%>/edit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            order
          })
        })
        .catch(error => console.error('Error:', error));
    }
  </script>
  <!-- <script>
    const draggableItems = document.querySelectorAll('.draggable-item');

    let isDragging = false;

    draggableItems.forEach(item => {
      item.addEventListener('dragstart', () => {
        item.classList.add('dragging');
        isDragging = true;
      });

      item.addEventListener('dragend', () => {
        if (isDragging) {
          isDragging = false;
          sendUpdatedOrder();
        }
        item.classList.remove('dragging');
      });
    });

    const draggableList = document.getElementById('draggable-list');

    draggableList.addEventListener('dragover', (e) => {
      e.preventDefault();
      const afterElement = getDragAfterElement(draggableList, e.clientY);
      const draggingItem = document.querySelector('.dragging');
      if (afterElement == null) {
        draggableList.appendChild(draggingItem);
      } else {
        draggableList.insertBefore(draggingItem, afterElement);
      }
    });

    async function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll('.draggable-item:not(.dragging)')];

      return draggableElements.reduce(async (closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
          return {
            offset: offset,
            element: child
          };
        } else {
          return closest;
        }
      }, {
        offset: Number.NEGATIVE_INFINITY
      }).element;
    }

    async function sendUpdatedOrder() {
      let ids = [];
      for (let i = 0; i < draggableItems.length; i++) {
        ids.push(draggableItems[i].getAttribute('data-id'));
      }
      await fetch(`/admin/quests/${quest._id}/edit`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          content: ids
        })
      })
    }
  </script> -->
</body>

</html>